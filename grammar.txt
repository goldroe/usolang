IDENT    = [a-zA-Z][_0-9a-zA-Z]*
CHARLIT  = \' ([^\n\t\\\'] | \\' | \\\\ | \\n | \\t) \'
STRLIT   = \" ([^\n\t\\\"] | \\" | \\\\ | \\n | \\t)* \"

FLOATLIT = (0|[1-9][0-9]*)f
         | .[0-9]*f
         | (0|[1-9][0-9]*).[0-9]*f

INTLIT   = 0 | [1-9][0-9]*    DECIMAL
         | 0[xX][0-9a-fA-F]+  HEX
         | 0[0-7]+            OCTAL
         | 0[bB][0-1]+        BINARY

COMMENTS = // * (\r\n|\r|\n|)
         | /\* ([^\*]|(\*+[^/])*? \*/


   UNARY OPERATORS:
INC = ++
DEC = --

BINARY OPERATORS:
 LSHIFT  <<
 RSHIFT  >>
 OR   ||
 AND  &&
 LTEQ <=
 GTEQ >=
 EQ   ==
 NEQ  !=

 ADD_ASSIGN    +=
 SUB_ASSIGN    -=
 MUL_ASSIGN    *=
 DIV_ASSIGN    /=
 MOD_ASSIGN    %=
 AUTO_ASSIGN   :=
 LSHIFT_ASSIGN <<=
 RSHIFT_ASSIGN >>=
 OR_ASSIGN     |=
 XOR_ASSIGN    ^=
 AND_ASSIGN    &=
 NOT_ASSIGN    ~=

OPERATOR PRECEDENCE:
 () [] .
 INC DEC UPLUS UMINUS ! ~
 LSHIFT RSHIFT
 &
 ^
 |
 * / %
 + -
 LT LTEQ GT GTEQ
 EQ NEQ
 AND
 OR
 TERNARY
 =
 *_ASSIGN


SAMPLE:

String :: struct {
  length: int;
  data: *char;
}

Vector2 :: struct {
  x: int;
  y: int;
}

make_vector :: (x: int, y: int) : Vector2 {
  result: Vector2;
  result.x = x;
  result.y = y;
  return result;
}

make_vector :: (x: int, y: int) : Vector2 {
  result := {x, y};
  return (:Vector2){x, y};
}

GRAMMAR:

base_type = int
          | float
          | double
          | char
type = IDENT ('[]' | '*')*
     | base_type ('[]' | '*')*

exprlist = (expr (',' exprlist)*)?
typelist = (type (',' typelist)*)?
paramlist = (IDENT ':' type (',' paramlist)*)?
enumfieldlist = (IDENT ('=' expr)? (',' enumfieldlist)*)?

aggregatefield = IDENT ':' type ('=' expr)? ';'

funcdecl   = IDENT '::' '(' paramlist  ')' ':' typelist stmtblock
enumdecl   = IDENT '::' 'enum' '{' enumfieldlist '}'
structdecl = IDENT '::' 'struct' '{' aggregatefield* '}'
uniondecl  = IDENT '::' 'union' '{' aggregatefield* '}'
vardecl    = IDENT ':' type ('=' expr)? ';'
           | IDENT AUTO_ASSIGN expr

decl = funcdecl
     | enumdecl
     | structdecl
     | uniondecl
     | vardecl

Statements:

assign_op = '=' | AUTO_ASSIGN | ADD_ASSIGN | ...
caseblock = 'case' expr ':' statement*
          | 'default' ':' statement*
switchblock = '{' caseblock* '}'
stmtblock = '{' statement* '}'

statement = 'if' expr stmtblock ('else if' stmtblock)* 'else' stmtblock
          | 'do' stmtblock 'while' expr ';'
          | 'while' expr stmtblock
          | 'for' expr stmtblock
          | 'switch' expr switchblock
          | 'return' expr? ';'
          | 'break' ';'
          | 'continue' ';'
          | expr (INC | DEC | assign_op expr)?
          | stmtblock

Expressions:

cmp_op = EQ | NEQ | '<' | '>' | LTEQ | GTEQ
add_op = '+' | '-' | '^' | '|'
mul_op = '*' | '/' | '%' | '&' | LSHIFT | RSHIFT

typespec = IDENT | '(' ':' type ')'
operand_expr = INT
             | FLOAT
             | STR
             | IDENT
             | typespec? '{' exprlist '}'
             | CAST '(' type ')' expr
             | '(' epxr ')'
base_expr = operand_expr ('(' exprlist ')' | '[' expr ']' | '.' IDENT)*
unary_expr = [+-&*] unary_expr
           | base_expr
mul_expr = unary_expr (mul_op unary_expr)*
add_expr = mul_expr (add_op mul_expr)*
cmp_expr = add_expr (cmp_op add_expr)*
and_epxr = cmp_expr (AND cmp_expr)*
or_expr = and_expr (OR and_expr)*
ternary_expr = or_expr ('?' ternary_expr ':' ternary_expr)?
expr = ternary_expr
